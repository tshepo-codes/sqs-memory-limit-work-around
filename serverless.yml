service: sqs-memory-limit-work-around

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'develop'}
  region: ${opt:region, 'eu-west-1'} #TODO replace with your region
  environment:
    FILE_BUCKET_NAME: ${self:custom.filesBucket}
    QUEUE_ARN: 
      Ref: MyQueue
  
  # This iam role will be applied to all lambdas.
  # Best practice is to have a role specific to each lamda for least privilage security
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ChangeMessageVisibility
        - sqs:ReceiveMessage
      Resource:
        Fn::GetAtt: [MyQueue, Arn]
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::${self:custom.filesBucket}"
        - "arn:aws:s3:::${self:custom.filesBucket}/*"
    

custom:
  filesBucket: app-files-${self:provider.stage}

functions:
  # Function to send messages to sqs
  producerFunction:
    handler: sqs-producer.handler
    name: sqsProducerFunction

  # Function to read messages from sqs
  consumerFunction:
    handler: sqs-consumer.handler
    name: sqsConsumerFunction
    events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - MyQueue
              - Arn
          batchSize: 5
          maximumRetryAttempts: 2
          topicName: MyQueue
            
resources:
  Resources:
    # File bucket to hold large payloads that cannot be sent through sqs
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.filesBucket}
    # SQS
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyQueue
      